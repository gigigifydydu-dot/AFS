print("Debug")

local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local HumanoidRootPartChar = char:WaitForChild("HumanoidRootPart")
local ID_NAME = player.Name
local ID_WORLD = player:WaitForChild("World").Value

local ChoseTargetWorld = "All"

local REP = game:GetService("ReplicatedStorage")
local RemoteFolder = REP:WaitForChild("Remote")
local BindableFolder = REP:WaitForChild("Bindable")

local SendPetEvent = RemoteFolder:WaitForChild("SendPet")
local SendPetBindable = BindableFolder:WaitForChild("SendPet")

local TargetWorldEnemy = game.Workspace.Worlds:FindFirstChild(ID_WORLD).Enemies

function GetAllPets()
	for index, value in pairs(player:FindFirstChild("Pets"):GetChildren()) do
		print(value.Name)
		table.insert(ListPets, value)
	end
	print(ListPets)
end
GetAllPets()

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Anime Fighter Simulator",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "AFS Script",
   LoadingSubtitle = "by Divine",
   ShowText = "AFS", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = AFS_HACK_FOLDER, -- Create a custom folder for your hub/game
      FileName = "AFS_HACK_DIVINE"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("Main", "brain")
local Target = nil

local AutoAttack = Tab:CreateToggle({
   Name = "Auto Attack",
   CurrentValue = false,
   Flag = "Auto_Attack", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
		while Value == true do
			wait(0.2)
			if #TargetWorldEnemy:GetChildren() == 0 then
				if Value == true then
					continue
				else
					return
				end
			end
			if Target and Target.Parent then
				if Value == true then
					continue
				else
					return
				end
			else
				Target = nil
			end
			for i, enemy in pairs(TargetWorldEnemy:GetChildren()) do
				if enemy.Name == ChoseTargetWorld or ChoseTargetWorld == "All" then
					local distance = (HumanoidRootPartChar.Position - enemy.HumanoidRootPart.Position).Magnitude
					print(distance)
					if distance < 100 then
						Target = enemy
						for Id, Pet in ipairs(player:FindFirstChild("Pets"):GetChildren()) do
							SendPetBindable:Fire(enemy)
							SendPetEvent:FireServer(Pet.Value, enemy, i)
						end
					end
				end
			end
		end
   end,
})

local ChoseTarget = Tab:CreateDropdown({
   Name = "Chose Enemy",
   Options = {},
   CurrentOption = {"All"},
   MultipleOptions = false,
   Flag = "ChoseTarget", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   -- The function that takes place when the selected option is changed
   -- The variable (Options) is a table of strings for the current selected options
		ChoseTargetWorld = Options
   end,
})

local RefreshTargetList = Tab:CreateButton({
   Name = "Refresh Target List",
   Callback = function()
   -- The function that takes place when the button is pressed
		local EnemyList = {}
		table.insert(EnemyList, "All")
		for index, enemy in ipairs(TargetWorldEnemy:GetChildren()) do
			table.insert(EnemyList, enemy.Name)
		end
		ChoseTarget:Refresh(EnemyList) -- The new list of options
   end,
})

local CollectCoins = Tab:CreateToggle({
   Name = "Collect Coins (Fruits And Shards)",
   CurrentValue = false,
   Flag = "Collect_Coins", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
		while Value == true do
			wait(1)
			for index, value in pairs(game.Workspace.Effects:GetChildren()) do
				if value:FindFirstChild("Coin") or value:FindFirstChild("Fruit") or value.Name == "TowerShard" or value.Name == "GenericItem" then
					value:SetPrimaryPartCFrame(HumanoidRootPartChar.CFrame)
				end
			end
		end
   end,
})
